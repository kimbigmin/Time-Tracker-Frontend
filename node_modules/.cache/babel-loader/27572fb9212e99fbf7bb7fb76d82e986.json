{"ast":null,"code":"var _jsxFileName = \"/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/pages/input-page/InputPage.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Header from \"../../components/Header/Header\";\nimport InputForm from \"../../components/InputForm/InputForm\";\nimport styled from \"styled-components\";\nimport sumHoursMinutes from \"../../utils/sumTime\";\nimport Calender from \"../../components/Calendar/Calendar\";\nimport { getData } from \"../../utils/getData\";\nimport { minutesToHours } from \"../../utils/minutesToHours\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [calender, setCalender] = useState(() => {\n    const thisYear = new Date().getFullYear();\n    const thisMonth = new Date().getMonth() + 1;\n    return `${thisYear}.${thisMonth}`;\n  });\n  const [selectedDate, setSelectedDate] = useState(new Date().getDate());\n  const [finishedDay, setFinishedDays] = useState([]);\n  let improveTime = useRef({\n    study: \"\",\n    workout: \"\",\n    reading: \"\",\n    rest: \"\"\n  });\n  let privateTime = useRef({\n    privates: \"\",\n    game: \"\"\n  });\n  let sleepTime = useRef({\n    night: \"\",\n    nap: \"\",\n    wake: \"\",\n    sleep: \"\"\n  });\n  let worksTime = useRef({\n    works: \"\",\n    houseWork: \"\"\n  });\n  console.log(\"test\");\n  useEffect(() => {\n    getData(setData);\n  }, []); // 입력 항목 추출\n\n  const {\n    study,\n    workout,\n    reading,\n    rest\n  } = improveTime.current;\n  const {\n    privates,\n    game\n  } = privateTime.current;\n  const {\n    night,\n    nap,\n    wake,\n    sleep\n  } = sleepTime.current;\n  const {\n    works,\n    houseWork\n  } = worksTime.current;\n  const entireTime = {\n    entireImprove: minutesToHours(Object.values(improveTime.current).reduce((acc, val) => acc + sumHoursMinutes(val), 0)),\n    entirePrivate: minutesToHours(Object.values(privateTime.current).reduce((acc, val) => acc + sumHoursMinutes(val), 0)),\n    entireWorks: minutesToHours(Object.values(worksTime.current).reduce((acc, val) => acc + sumHoursMinutes(val), 0)),\n    entireSleep: minutesToHours(sumHoursMinutes(sleepTime.current.night) + sumHoursMinutes(sleepTime.current.nap))\n  }; // Input 핸들러 컬렉션\n\n  const inputHandlers = {\n    worksHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      worksTime.current = { ...worksTime.current,\n        [name]: value\n      };\n    },\n\n    sleepHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      sleepTime.current = { ...sleepTime.current,\n        [name]: value\n      };\n    },\n\n    privateHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      privateTime.current = { ...privateTime.current,\n        [name]: value\n      };\n    },\n\n    improveHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      improveTime.current = { ...improveTime.current,\n        [name]: value\n      };\n    }\n\n  };\n\n  const getId = data => {\n    if (data) {\n      return data.map(item => {\n        if (item.date === `${calender}.${selectedDate}`) {\n          return item.id;\n        }\n\n        return \"\";\n      }).join(\"\");\n    }\n  };\n\n  const getFormInfo = async data => {\n    if (data) {\n      const id = await getId(data);\n\n      if (id) {\n        const response = await fetch(`http://localhost:3000/timedata/${id}`);\n        const result = await response.json();\n        improveTime.current = { ...improveTime.current,\n          ...result.improve\n        };\n        privateTime.current = { ...privateTime.current,\n          ...result.private\n        };\n        sleepTime.current = { ...sleepTime.current,\n          ...result.sleep\n        };\n        worksTime.current = { ...worksTime.current,\n          ...result.works\n        };\n        console.log(\"실행테스트\");\n      } else {\n        improveTime.current = { ...improveTime.current,\n          study: \"\",\n          workout: \"\",\n          reading: \"\",\n          rest: \"\"\n        };\n        privateTime.current = { ...privateTime.current,\n          privates: \"\",\n          game: \"\"\n        };\n        sleepTime.current = { ...sleepTime.current,\n          night: \"\",\n          nap: \"\",\n          wake: \"\",\n          sleep: \"\"\n        };\n        worksTime.current = { ...worksTime.current,\n          works: \"\",\n          houseWork: \"\"\n        };\n      }\n    }\n  }; // 폼 제출 핸들러\n\n\n  const submitHandler = async () => {\n    // post할 데이터\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest\n      },\n      private: {\n        privates,\n        game\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep\n      },\n      working: {\n        works,\n        houseWork\n      },\n      entireTime\n    }; // fetch POST\n\n    await fetch(\"http://localhost:3000/timedata\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(timeData)\n    });\n    await getData(setData);\n    setSelectedDate(selectedDate + 1);\n    console.log(data);\n  };\n\n  const updateHandler = async () => {\n    // post할 데이터\n    const id = await getId(data);\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest\n      },\n      private: {\n        privates,\n        game\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep\n      },\n      working: {\n        works,\n        houseWork\n      },\n      entireTime\n    }; // fetch POST\n\n    await fetch(`http://localhost:3000/timedata/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(timeData)\n    });\n    await getData(setData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(InputForm, {\n        handlers: inputHandlers,\n        entireTime: entireTime,\n        submitHandler: submitHandler,\n        selectedDate: selectedDate,\n        calender: calender,\n        updateHandler: updateHandler,\n        finishedDay: finishedDay,\n        improveTime: improveTime,\n        privateTime: privateTime,\n        sleepTime: sleepTime,\n        worksTime: worksTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Calender, {\n        calender: calender,\n        setCalender: setCalender,\n        setSelectedDate: setSelectedDate,\n        selectedDate: selectedDate,\n        data: data,\n        finishedDay: finishedDay,\n        setFinishedDays: setFinishedDays,\n        getFormInfo: getFormInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(InputPage, \"mnCqCHjGGbufm7ddMmBrFd+SnWU=\");\n\n_c = InputPage;\nconst Container = styled.div`\n  display: flex;\n`;\n_c2 = Container;\nexport default InputPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputPage\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/pages/input-page/InputPage.tsx"],"names":["React","useState","useEffect","useRef","Header","InputForm","styled","sumHoursMinutes","Calender","getData","minutesToHours","InputPage","data","setData","calender","setCalender","thisYear","Date","getFullYear","thisMonth","getMonth","selectedDate","setSelectedDate","getDate","finishedDay","setFinishedDays","improveTime","study","workout","reading","rest","privateTime","privates","game","sleepTime","night","nap","wake","sleep","worksTime","works","houseWork","console","log","current","entireTime","entireImprove","Object","values","reduce","acc","val","entirePrivate","entireWorks","entireSleep","inputHandlers","worksHandler","e","value","name","target","sleepHandler","privateHandler","improveHandler","getId","map","item","date","id","join","getFormInfo","response","fetch","result","json","improve","private","submitHandler","timeData","sleeping","working","method","headers","body","JSON","stringify","updateHandler","Container","div"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Header from \"../../components/Header/Header\";\nimport InputForm from \"../../components/InputForm/InputForm\";\nimport styled from \"styled-components\";\nimport sumHoursMinutes from \"../../utils/sumTime\";\nimport Calender from \"../../components/Calendar/Calendar\";\nimport { getData } from \"../../utils/getData\";\nimport { minutesToHours } from \"../../utils/minutesToHours\";\nimport { OneDate } from \"../../type\";\n\nfunction InputPage() {\n  const [data, setData] = useState(null);\n  const [calender, setCalender] = useState((): string => {\n    const thisYear = new Date().getFullYear();\n    const thisMonth = new Date().getMonth() + 1;\n\n    return `${thisYear}.${thisMonth}`;\n  });\n  const [selectedDate, setSelectedDate] = useState(new Date().getDate());\n  const [finishedDay, setFinishedDays] = useState([]);\n\n  let improveTime = useRef({\n    study: \"\",\n    workout: \"\",\n    reading: \"\",\n    rest: \"\",\n  });\n\n  let privateTime = useRef({\n    privates: \"\",\n    game: \"\",\n  });\n\n  let sleepTime = useRef({\n    night: \"\",\n    nap: \"\",\n    wake: \"\",\n    sleep: \"\",\n  });\n\n  let worksTime = useRef({\n    works: \"\",\n    houseWork: \"\",\n  });\n\n  console.log(\"test\");\n  useEffect(() => {\n    getData(setData);\n  }, []);\n\n  // 입력 항목 추출\n  const { study, workout, reading, rest } = improveTime.current;\n  const { privates, game } = privateTime.current;\n  const { night, nap, wake, sleep } = sleepTime.current;\n  const { works, houseWork } = worksTime.current;\n\n  const entireTime = {\n    entireImprove: minutesToHours(\n      Object.values(improveTime.current).reduce(\n        (acc, val) => acc + sumHoursMinutes(val),\n        0\n      )\n    ),\n    entirePrivate: minutesToHours(\n      Object.values(privateTime.current).reduce(\n        (acc, val) => acc + sumHoursMinutes(val),\n        0\n      )\n    ),\n    entireWorks: minutesToHours(\n      Object.values(worksTime.current).reduce(\n        (acc, val) => acc + sumHoursMinutes(val),\n        0\n      )\n    ),\n\n    entireSleep: minutesToHours(\n      sumHoursMinutes(sleepTime.current.night) +\n        sumHoursMinutes(sleepTime.current.nap)\n    ),\n  };\n\n  // Input 핸들러 컬렉션\n  const inputHandlers = {\n    worksHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      worksTime.current = {\n        ...worksTime.current,\n        [name]: value,\n      };\n    },\n    sleepHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      sleepTime.current = {\n        ...sleepTime.current,\n        [name]: value,\n      };\n    },\n    privateHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      privateTime.current = {\n        ...privateTime.current,\n        [name]: value,\n      };\n    },\n    improveHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      improveTime.current = {\n        ...improveTime.current,\n        [name]: value,\n      };\n    },\n  };\n\n  const getId = (data: any) => {\n    if (data) {\n      return data\n        .map((item: OneDate) => {\n          if (item.date === `${calender}.${selectedDate}`) {\n            return item.id;\n          }\n          return \"\";\n        })\n        .join(\"\");\n    }\n  };\n\n  const getFormInfo = async (data: any) => {\n    if (data) {\n      const id = await getId(data);\n      if (id) {\n        const response = await fetch(`http://localhost:3000/timedata/${id}`);\n        const result = await response.json();\n        improveTime.current = {\n          ...improveTime.current,\n          ...result.improve,\n        };\n        privateTime.current = {\n          ...privateTime.current,\n          ...result.private,\n        };\n        sleepTime.current = {\n          ...sleepTime.current,\n          ...result.sleep,\n        };\n        worksTime.current = {\n          ...worksTime.current,\n          ...result.works,\n        };\n        console.log(\"실행테스트\");\n      } else {\n        improveTime.current = {\n          ...improveTime.current,\n          study: \"\",\n          workout: \"\",\n          reading: \"\",\n          rest: \"\",\n        };\n        privateTime.current = {\n          ...privateTime.current,\n          privates: \"\",\n          game: \"\",\n        };\n        sleepTime.current = {\n          ...sleepTime.current,\n          night: \"\",\n          nap: \"\",\n          wake: \"\",\n          sleep: \"\",\n        };\n        worksTime.current = {\n          ...worksTime.current,\n          works: \"\",\n          houseWork: \"\",\n        };\n      }\n    }\n  };\n\n  // 폼 제출 핸들러\n  const submitHandler = async () => {\n    // post할 데이터\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest,\n      },\n      private: {\n        privates,\n        game,\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep,\n      },\n      working: {\n        works,\n        houseWork,\n      },\n      entireTime,\n    };\n\n    // fetch POST\n    await fetch(\"http://localhost:3000/timedata\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(timeData),\n    });\n\n    await getData(setData);\n    setSelectedDate(selectedDate + 1);\n    console.log(data);\n  };\n\n  const updateHandler = async () => {\n    // post할 데이터\n    const id = await getId(data);\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest,\n      },\n      private: {\n        privates,\n        game,\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep,\n      },\n      working: {\n        works,\n        houseWork,\n      },\n      entireTime,\n    };\n    // fetch POST\n    await fetch(`http://localhost:3000/timedata/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(timeData),\n    });\n    await getData(setData);\n  };\n  return (\n    <>\n      <Header />\n      <Container>\n        <InputForm\n          handlers={inputHandlers}\n          entireTime={entireTime}\n          submitHandler={submitHandler}\n          selectedDate={selectedDate}\n          calender={calender}\n          updateHandler={updateHandler}\n          finishedDay={finishedDay}\n          improveTime={improveTime}\n          privateTime={privateTime}\n          sleepTime={sleepTime}\n          worksTime={worksTime}\n        />\n        <Calender\n          calender={calender}\n          setCalender={setCalender}\n          setSelectedDate={setSelectedDate}\n          selectedDate={selectedDate}\n          data={data}\n          finishedDay={finishedDay}\n          setFinishedDays={setFinishedDays}\n          getFormInfo={getFormInfo}\n        />\n      </Container>\n    </>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}