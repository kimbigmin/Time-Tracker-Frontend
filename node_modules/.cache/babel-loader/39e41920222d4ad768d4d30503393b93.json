{"ast":null,"code":"var _jsxFileName = \"/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/components/Calendar/Calendar.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { Container } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calender(_ref) {\n  _s();\n\n  let {\n    calender,\n    setCalender,\n    setSelectedDate,\n    data,\n    selectedDate,\n    finishedDay,\n    setFinishedDays\n  } = _ref;\n  const DAYS = [\"Mon\", \"Tue\", \"Wen\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const dayLists = DAYS.map((item, i) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"day\",\n      children: item\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this);\n  });\n\n  const getId = data => {\n    if (data) {\n      return data.map(item => {\n        if (item.date === `${calender}.${selectedDate}`) {\n          return item.id;\n        }\n\n        return \"\";\n      }).join(\"\");\n    }\n  };\n\n  const getFormInfo = async data => {\n    if (data) {\n      const id = await getId(data);\n\n      if (id) {\n        const response = await fetch(`http://localhost:3000/timedata/${id}`);\n        const result = await response.json();\n        setImproveTime(current => ({ ...current,\n          ...result.improve\n        }));\n        setPrivateTime(result.private);\n        setSleepTime(result.sleeping);\n        setWorksTime(result.working);\n      } else {\n        setImproveTime({\n          study: \"\",\n          workout: \"\",\n          reading: \"\",\n          rest: \"\"\n        });\n        setPrivateTime({\n          privates: \"\",\n          game: \"\"\n        });\n        setSleepTime({\n          night: \"\",\n          nap: \"\",\n          wake: \"\",\n          sleep: \"\"\n        });\n        setWorksTime({\n          works: \"\",\n          houseWork: \"\"\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    async function getInputDoneDates() {\n      const response = await fetch(\"http://localhost:3000/timedata\");\n      const result = await response.json();\n      const done = result.map(item => {\n        if (item.date.includes(calender)) {\n          return item.date.split(\".\")[2];\n        }\n      }).filter(el => el !== undefined);\n      console.log(done);\n      setFinishedDays(done);\n    }\n\n    getInputDoneDates();\n  }, [data, calender]);\n\n  const dateClickColorHandler = date => {\n    if (selectedDate === date) return \"selected\";\n\n    if (finishedDay.includes(String(date))) {\n      return \"doneDate\";\n    } else {\n      return \"date\";\n    }\n  }; // 월별에 따른 달력 데이터 불러오기\n\n\n  let dateLists = Array(37).fill(\"\").map((_, idx) => {\n    const DATE = new Date(calender);\n    const startDay = DATE.getDay() !== 0 ? DATE.getDay() : 7;\n    const startMonth = DATE.getMonth() + 1;\n    const thirtyDaysMonth = [4, 6, 9, 11];\n    const date = idx + 2 - startDay;\n    const isBlankDay = startDay - 1 > idx;\n    const is31day = thirtyDaysMonth.includes(startMonth) && date > 30;\n    const isLeapYearFeb = startMonth === 2 && DATE.getFullYear() % 4 === 0 && date > 29;\n    const isCommonYearFeb = startMonth === 2 && DATE.getFullYear() % 4 !== 0 && date > 28;\n    const isOver31Day = date > 31;\n    if (isBlankDay) return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 30\n    }, this);\n    if (is31day) return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 27\n    }, this);\n\n    if (isLeapYearFeb) {\n      return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 16\n      }, this);\n    } else {\n      if (isCommonYearFeb) return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 37\n      }, this);\n    }\n\n    if (isOver31Day) return /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 31\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: dateClickColorHandler(date),\n      onClick: () => {\n        setSelectedDate(date);\n        getFormInfo(data); // 바인딩 함수 추가\n      },\n      children: date\n    }, date, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this);\n  }); // 캘린더 이전 이동버튼 핸들러\n\n  const prevHandler = () => {\n    setCalender(current => {\n      let [year, month] = current.split(\".\");\n\n      if (month === \"1\") {\n        month = \"12\";\n        year = String(Number(year) - 1);\n        setCalender(`${year}.${month}`);\n        setSelectedDate(1);\n      } else {\n        setCalender(`${year}.${Number(month) - 1}`);\n        setSelectedDate(1);\n      }\n    });\n  }; // 캘린더 다음 이동버튼 핸들러\n\n\n  const nextHandler = () => {\n    setCalender(current => {\n      let [year, month] = current.split(\".\");\n\n      if (month === \"12\") {\n        month = \"1\";\n        year = String(Number(year) + 1);\n        setCalender(`${year}.${Number(month)}`);\n        setSelectedDate(1);\n      } else {\n        setCalender(`${year}.${Number(month) + 1}`);\n        setSelectedDate(1);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"move-Btn\",\n        onClick: prevHandler,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-chevron-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"yearAndMonth\",\n        children: calender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"move-Btn\",\n        onClick: nextHandler,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-chevron-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days\",\n      children: dayLists\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dates\",\n      children: dateLists\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calender, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Calender;\nexport default Calender;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calender\");","map":{"version":3,"sources":["/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/components/Calendar/Calendar.tsx"],"names":["React","useEffect","Container","Calender","calender","setCalender","setSelectedDate","data","selectedDate","finishedDay","setFinishedDays","DAYS","dayLists","map","item","i","getId","date","id","join","getFormInfo","response","fetch","result","json","setImproveTime","current","improve","setPrivateTime","private","setSleepTime","sleeping","setWorksTime","working","study","workout","reading","rest","privates","game","night","nap","wake","sleep","works","houseWork","getInputDoneDates","done","includes","split","filter","el","undefined","console","log","dateClickColorHandler","String","dateLists","Array","fill","_","idx","DATE","Date","startDay","getDay","startMonth","getMonth","thirtyDaysMonth","isBlankDay","is31day","isLeapYearFeb","getFullYear","isCommonYearFeb","isOver31Day","prevHandler","year","month","Number","nextHandler"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,SAA1B;;;AAGA,SAASC,QAAT,OAQQ;AAAA;;AAAA,MARU;AAChBC,IAAAA,QADgB;AAEhBC,IAAAA,WAFgB;AAGhBC,IAAAA,eAHgB;AAIhBC,IAAAA,IAJgB;AAKhBC,IAAAA,YALgB;AAMhBC,IAAAA,WANgB;AAOhBC,IAAAA;AAPgB,GAQV;AACN,QAAMC,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAb;AACA,QAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAS,CAACC,IAAD,EAAOC,CAAP,KAAa;AACrC,wBACE;AAAI,MAAA,SAAS,EAAC,KAAd;AAAA,gBACGD;AADH,OAAyBC,CAAzB;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GANgB,CAAjB;;AAQA,QAAMC,KAAK,GAAIT,IAAD,IAAe;AAC3B,QAAIA,IAAJ,EAAU;AACR,aAAOA,IAAI,CACRM,GADI,CACCC,IAAD,IAAmB;AACtB,YAAIA,IAAI,CAACG,IAAL,KAAe,GAAEb,QAAS,IAAGI,YAAa,EAA9C,EAAiD;AAC/C,iBAAOM,IAAI,CAACI,EAAZ;AACD;;AACD,eAAO,EAAP;AACD,OANI,EAOJC,IAPI,CAOC,EAPD,CAAP;AAQD;AACF,GAXD;;AAaA,QAAMC,WAAW,GAAG,MAAOb,IAAP,IAAqB;AACvC,QAAIA,IAAJ,EAAU;AACR,YAAMW,EAAE,GAAG,MAAMF,KAAK,CAACT,IAAD,CAAtB;;AACA,UAAIW,EAAJ,EAAQ;AACN,cAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiCJ,EAAG,EAAtC,CAA5B;AACA,cAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACAC,QAAAA,cAAc,CAAEC,OAAD,KAAc,EAC3B,GAAGA,OADwB;AAE3B,aAAGH,MAAM,CAACI;AAFiB,SAAd,CAAD,CAAd;AAIAC,QAAAA,cAAc,CAACL,MAAM,CAACM,OAAR,CAAd;AACAC,QAAAA,YAAY,CAACP,MAAM,CAACQ,QAAR,CAAZ;AACAC,QAAAA,YAAY,CAACT,MAAM,CAACU,OAAR,CAAZ;AACD,OAVD,MAUO;AACLR,QAAAA,cAAc,CAAC;AACbS,UAAAA,KAAK,EAAE,EADM;AAEbC,UAAAA,OAAO,EAAE,EAFI;AAGbC,UAAAA,OAAO,EAAE,EAHI;AAIbC,UAAAA,IAAI,EAAE;AAJO,SAAD,CAAd;AAMAT,QAAAA,cAAc,CAAC;AACbU,UAAAA,QAAQ,EAAE,EADG;AAEbC,UAAAA,IAAI,EAAE;AAFO,SAAD,CAAd;AAIAT,QAAAA,YAAY,CAAC;AACXU,UAAAA,KAAK,EAAE,EADI;AAEXC,UAAAA,GAAG,EAAE,EAFM;AAGXC,UAAAA,IAAI,EAAE,EAHK;AAIXC,UAAAA,KAAK,EAAE;AAJI,SAAD,CAAZ;AAMAX,QAAAA,YAAY,CAAC;AAAEY,UAAAA,KAAK,EAAE,EAAT;AAAaC,UAAAA,SAAS,EAAE;AAAxB,SAAD,CAAZ;AACD;AACF;AACF,GAjCD;;AAmCA5C,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe6C,iBAAf,GAAmC;AACjC,YAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AACA,YAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACA,YAAMuB,IAAI,GAAGxB,MAAM,CAChBV,GADU,CACLC,IAAD,IAAmB;AACtB,YAAIA,IAAI,CAACG,IAAL,CAAU+B,QAAV,CAAmB5C,QAAnB,CAAJ,EAAkC;AAChC,iBAAOU,IAAI,CAACG,IAAL,CAAUgC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACD;AACF,OALU,EAMVC,MANU,CAMFC,EAAD,IAAaA,EAAE,KAAKC,SANjB,CAAb;AAQAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AACArC,MAAAA,eAAe,CAACqC,IAAD,CAAf;AACD;;AACDD,IAAAA,iBAAiB;AAClB,GAhBQ,EAgBN,CAACvC,IAAD,EAAOH,QAAP,CAhBM,CAAT;;AAkBA,QAAMmD,qBAAqB,GAAItC,IAAD,IAAkB;AAC9C,QAAIT,YAAY,KAAKS,IAArB,EAA2B,OAAO,UAAP;;AAC3B,QAAIR,WAAW,CAACuC,QAAZ,CAAqBQ,MAAM,CAACvC,IAAD,CAA3B,CAAJ,EAAwC;AACtC,aAAO,UAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAP;AACD;AACF,GAPD,CA5EM,CAqFN;;;AACA,MAAIwC,SAAS,GAAGC,KAAK,CAAC,EAAD,CAAL,CACbC,IADa,CACR,EADQ,EAEb9C,GAFa,CAET,CAAC+C,CAAD,EAAIC,GAAJ,KAAY;AACf,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS3D,QAAT,CAAb;AACA,UAAM4D,QAAgB,GAAGF,IAAI,CAACG,MAAL,OAAkB,CAAlB,GAAsBH,IAAI,CAACG,MAAL,EAAtB,GAAsC,CAA/D;AACA,UAAMC,UAAkB,GAAGJ,IAAI,CAACK,QAAL,KAAkB,CAA7C;AACA,UAAMC,eAAyB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAlC;AACA,UAAMnD,IAAY,GAAG4C,GAAG,GAAG,CAAN,GAAUG,QAA/B;AACA,UAAMK,UAAU,GAAGL,QAAQ,GAAG,CAAX,GAAeH,GAAlC;AACA,UAAMS,OAAO,GAAGF,eAAe,CAACpB,QAAhB,CAAyBkB,UAAzB,KAAwCjD,IAAI,GAAG,EAA/D;AACA,UAAMsD,aAAa,GACjBL,UAAU,KAAK,CAAf,IAAoBJ,IAAI,CAACU,WAAL,KAAqB,CAArB,KAA2B,CAA/C,IAAoDvD,IAAI,GAAG,EAD7D;AAEA,UAAMwD,eAAe,GACnBP,UAAU,KAAK,CAAf,IAAoBJ,IAAI,CAACU,WAAL,KAAqB,CAArB,KAA2B,CAA/C,IAAoDvD,IAAI,GAAG,EAD7D;AAEA,UAAMyD,WAAW,GAAGzD,IAAI,GAAG,EAA3B;AAEA,QAAIoD,UAAJ,EAAgB,oBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AAChB,QAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;;AACb,QAAIC,aAAJ,EAAmB;AACjB,0BAAO;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,UAAIE,eAAJ,EAAqB,oBAAO;AAAA;AAAA;AAAA;AAAA,cAAP;AACtB;;AACD,QAAIC,WAAJ,EAAiB,oBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AAEjB,wBACE;AAEE,MAAA,SAAS,EAAEnB,qBAAqB,CAACtC,IAAD,CAFlC;AAGE,MAAA,OAAO,EAAE,MAAM;AACbX,QAAAA,eAAe,CAACW,IAAD,CAAf;AACAG,QAAAA,WAAW,CAACb,IAAD,CAAX,CAFa,CAGb;AACD,OAPH;AAAA,gBASGU;AATH,OACOA,IADP;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAtCa,CAAhB,CAtFM,CA8HN;;AACA,QAAM0D,WAAW,GAAG,MAAY;AAC9BtE,IAAAA,WAAW,CAAEqB,OAAD,IAAqB;AAC/B,UAAI,CAACkD,IAAD,EAAOC,KAAP,IAAgBnD,OAAO,CAACuB,KAAR,CAAc,GAAd,CAApB;;AAEA,UAAI4B,KAAK,KAAK,GAAd,EAAmB;AACjBA,QAAAA,KAAK,GAAG,IAAR;AACAD,QAAAA,IAAI,GAAGpB,MAAM,CAACsB,MAAM,CAACF,IAAD,CAAN,GAAe,CAAhB,CAAb;AACAvE,QAAAA,WAAW,CAAE,GAAEuE,IAAK,IAAGC,KAAM,EAAlB,CAAX;AACAvE,QAAAA,eAAe,CAAC,CAAD,CAAf;AACD,OALD,MAKO;AACLD,QAAAA,WAAW,CAAE,GAAEuE,IAAK,IAAGE,MAAM,CAACD,KAAD,CAAN,GAAgB,CAAE,EAA9B,CAAX;AACAvE,QAAAA,eAAe,CAAC,CAAD,CAAf;AACD;AACF,KAZU,CAAX;AAaD,GAdD,CA/HM,CA8IN;;;AACA,QAAMyE,WAAW,GAAG,MAAY;AAC9B1E,IAAAA,WAAW,CAAEqB,OAAD,IAAqB;AAC/B,UAAI,CAACkD,IAAD,EAAOC,KAAP,IAAgBnD,OAAO,CAACuB,KAAR,CAAc,GAAd,CAApB;;AAEA,UAAI4B,KAAK,KAAK,IAAd,EAAoB;AAClBA,QAAAA,KAAK,GAAG,GAAR;AACAD,QAAAA,IAAI,GAAGpB,MAAM,CAACsB,MAAM,CAACF,IAAD,CAAN,GAAe,CAAhB,CAAb;AACAvE,QAAAA,WAAW,CAAE,GAAEuE,IAAK,IAAGE,MAAM,CAACD,KAAD,CAAQ,EAA1B,CAAX;AACAvE,QAAAA,eAAe,CAAC,CAAD,CAAf;AACD,OALD,MAKO;AACLD,QAAAA,WAAW,CAAE,GAAEuE,IAAK,IAAGE,MAAM,CAACD,KAAD,CAAN,GAAgB,CAAE,EAA9B,CAAX;AACAvE,QAAAA,eAAe,CAAC,CAAD,CAAf;AACD;AACF,KAZU,CAAX;AAaD,GAdD;;AAgBA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAEqE,WAAlC;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kBAA8BvE;AAA9B;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAI,QAAA,SAAS,EAAC,UAAd;AAAyB,QAAA,OAAO,EAAE2E,WAAlC;AAAA,+BACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBAAuBnE;AAAvB;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAAwB6C;AAAxB;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAtLQtD,Q;;KAAAA,Q;AAwLT,eAAeA,QAAf","sourcesContent":["import * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { Container } from \"./style\";\nimport { OneDate } from \"../../type\";\n\nfunction Calender({\n  calender,\n  setCalender,\n  setSelectedDate,\n  data,\n  selectedDate,\n  finishedDay,\n  setFinishedDays,\n}: any) {\n  const DAYS = [\"Mon\", \"Tue\", \"Wen\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const dayLists = DAYS.map((item, i) => {\n    return (\n      <li className=\"day\" key={i}>\n        {item}\n      </li>\n    );\n  });\n\n  const getId = (data: any) => {\n    if (data) {\n      return data\n        .map((item: OneDate) => {\n          if (item.date === `${calender}.${selectedDate}`) {\n            return item.id;\n          }\n          return \"\";\n        })\n        .join(\"\");\n    }\n  };\n\n  const getFormInfo = async (data: any) => {\n    if (data) {\n      const id = await getId(data);\n      if (id) {\n        const response = await fetch(`http://localhost:3000/timedata/${id}`);\n        const result = await response.json();\n        setImproveTime((current) => ({\n          ...current,\n          ...result.improve,\n        }));\n        setPrivateTime(result.private);\n        setSleepTime(result.sleeping);\n        setWorksTime(result.working);\n      } else {\n        setImproveTime({\n          study: \"\",\n          workout: \"\",\n          reading: \"\",\n          rest: \"\",\n        });\n        setPrivateTime({\n          privates: \"\",\n          game: \"\",\n        });\n        setSleepTime({\n          night: \"\",\n          nap: \"\",\n          wake: \"\",\n          sleep: \"\",\n        });\n        setWorksTime({ works: \"\", houseWork: \"\" });\n      }\n    }\n  };\n\n  useEffect(() => {\n    async function getInputDoneDates() {\n      const response = await fetch(\"http://localhost:3000/timedata\");\n      const result = await response.json();\n      const done = result\n        .map((item: OneDate) => {\n          if (item.date.includes(calender)) {\n            return item.date.split(\".\")[2];\n          }\n        })\n        .filter((el: any) => el !== undefined);\n\n      console.log(done);\n      setFinishedDays(done);\n    }\n    getInputDoneDates();\n  }, [data, calender]);\n\n  const dateClickColorHandler = (date: number) => {\n    if (selectedDate === date) return \"selected\";\n    if (finishedDay.includes(String(date))) {\n      return \"doneDate\";\n    } else {\n      return \"date\";\n    }\n  };\n\n  // 월별에 따른 달력 데이터 불러오기\n  let dateLists = Array(37)\n    .fill(\"\")\n    .map((_, idx) => {\n      const DATE = new Date(calender);\n      const startDay: number = DATE.getDay() !== 0 ? DATE.getDay() : 7;\n      const startMonth: number = DATE.getMonth() + 1;\n      const thirtyDaysMonth: number[] = [4, 6, 9, 11];\n      const date: number = idx + 2 - startDay;\n      const isBlankDay = startDay - 1 > idx;\n      const is31day = thirtyDaysMonth.includes(startMonth) && date > 30;\n      const isLeapYearFeb =\n        startMonth === 2 && DATE.getFullYear() % 4 === 0 && date > 29;\n      const isCommonYearFeb =\n        startMonth === 2 && DATE.getFullYear() % 4 !== 0 && date > 28;\n      const isOver31Day = date > 31;\n\n      if (isBlankDay) return <li></li>;\n      if (is31day) return <li></li>;\n      if (isLeapYearFeb) {\n        return <li></li>;\n      } else {\n        if (isCommonYearFeb) return <li></li>;\n      }\n      if (isOver31Day) return <li></li>;\n\n      return (\n        <li\n          key={date}\n          className={dateClickColorHandler(date)}\n          onClick={() => {\n            setSelectedDate(date);\n            getFormInfo(data);\n            // 바인딩 함수 추가\n          }}\n        >\n          {date}\n        </li>\n      );\n    });\n\n  // 캘린더 이전 이동버튼 핸들러\n  const prevHandler = (): void => {\n    setCalender((current: string) => {\n      let [year, month] = current.split(\".\");\n\n      if (month === \"1\") {\n        month = \"12\";\n        year = String(Number(year) - 1);\n        setCalender(`${year}.${month}`);\n        setSelectedDate(1);\n      } else {\n        setCalender(`${year}.${Number(month) - 1}`);\n        setSelectedDate(1);\n      }\n    });\n  };\n  // 캘린더 다음 이동버튼 핸들러\n  const nextHandler = (): void => {\n    setCalender((current: string) => {\n      let [year, month] = current.split(\".\");\n\n      if (month === \"12\") {\n        month = \"1\";\n        year = String(Number(year) + 1);\n        setCalender(`${year}.${Number(month)}`);\n        setSelectedDate(1);\n      } else {\n        setCalender(`${year}.${Number(month) + 1}`);\n        setSelectedDate(1);\n      }\n    });\n  };\n\n  return (\n    <Container>\n      <div className=\"header\">\n        <li className=\"move-Btn\" onClick={prevHandler}>\n          <i className=\"fas fa-chevron-left\"></i>\n        </li>\n        <li className=\"yearAndMonth\">{calender}</li>\n        <li className=\"move-Btn\" onClick={nextHandler}>\n          <i className=\"fas fa-chevron-right\"></i>\n        </li>\n      </div>\n      <div className=\"days\">{dayLists}</div>\n      <div className=\"dates\">{dateLists}</div>\n    </Container>\n  );\n}\n\nexport default Calender;\n"]},"metadata":{},"sourceType":"module"}