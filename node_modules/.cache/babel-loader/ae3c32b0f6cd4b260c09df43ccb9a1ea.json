{"ast":null,"code":"var _jsxFileName = \"/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/pages/input-page/InputPage.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"../../components/Header/Header\";\nimport InputForm from \"../../components/InputForm/InputForm\";\nimport styled from \"styled-components\";\nimport sumHoursMinutes from \"../../utils/sumTime\";\nimport Calender from \"../../components/Calendar/Calendar\";\nimport { getData } from \"../../utils/getData\";\nimport { minutesToHours } from \"../../utils/minutesToHours\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction InputPage() {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [calender, setCalender] = useState(() => {\n    const thisYear = new Date().getFullYear();\n    const thisMonth = new Date().getMonth() + 1;\n    return `${thisYear}.${thisMonth}`;\n  });\n  const [selectedDate, setSelectedDate] = useState(new Date().getDate());\n  const [finishedDay, setFinishedDays] = useState([]);\n  const [improveTime, setImproveTime] = useState({\n    study: \"\",\n    workout: \"\",\n    reading: \"\",\n    rest: \"\"\n  });\n  const [privateTime, setPrivateTime] = useState({\n    privates: \"\",\n    game: \"\"\n  });\n  const [sleepTime, setSleepTime] = useState({\n    night: \"\",\n    nap: \"\",\n    wake: \"\",\n    sleep: \"\"\n  });\n  const [worksTime, setWorksTime] = useState({\n    works: \"\",\n    houseWork: \"\"\n  });\n  useEffect(() => {\n    getData(setData);\n  }, []); // 입력 항목 추출\n\n  const {\n    study,\n    workout,\n    reading,\n    rest\n  } = improveTime;\n  const {\n    privates,\n    game\n  } = privateTime;\n  const {\n    night,\n    nap,\n    wake,\n    sleep\n  } = sleepTime;\n  const {\n    works,\n    houseWork\n  } = worksTime;\n  const entireTime = {\n    entireImprove: minutesToHours(Object.values(improveTime).reduce((acc, val) => acc + sumHoursMinutes(val), 0)),\n    entirePrivate: minutesToHours(Object.values(privateTime).reduce((acc, val) => acc + sumHoursMinutes(val), 0)),\n    entireWorks: minutesToHours(Object.values(worksTime).reduce((acc, val) => acc + sumHoursMinutes(val), 0)),\n    entireSleep: minutesToHours(sumHoursMinutes(sleepTime.night) + sumHoursMinutes(sleepTime.nap))\n  }; // Input 핸들러 컬렉션\n\n  const inputHandlers = {\n    worksHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      setWorksTime({ ...worksTime,\n        [name]: value\n      });\n    },\n\n    sleepHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      setSleepTime({ ...sleepTime,\n        [name]: value\n      });\n    },\n\n    privateHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      setPrivateTime({ ...privateTime,\n        [name]: value\n      });\n    },\n\n    improveHandler(e) {\n      const {\n        value,\n        name\n      } = e.target;\n      setImproveTime({ ...improveTime,\n        [name]: value\n      });\n    }\n\n  };\n\n  const getId = data => {\n    if (data) {\n      return data.map(item => {\n        if (item.date === `${calender}.${selectedDate}`) {\n          return item.id;\n        }\n\n        return \"\";\n      }).join(\"\");\n    }\n  };\n\n  const getFormInfo = async data => {\n    if (data) {\n      const id = await getId(data);\n\n      if (id) {\n        const response = await fetch(`http://localhost:3000/timedata/${id}`);\n        const result = await response.json();\n        setImproveTime(() => {\n          return { ...improveTime,\n            result\n          };\n        });\n        setPrivateTime(result.private);\n        setSleepTime(result.sleeping);\n        setWorksTime(result.working);\n      } else {\n        setImproveTime({\n          study: \"\",\n          workout: \"\",\n          reading: \"\",\n          rest: \"\"\n        });\n        setPrivateTime({\n          privates: \"\",\n          game: \"\"\n        });\n        setSleepTime({\n          night: \"\",\n          nap: \"\",\n          wake: \"\",\n          sleep: \"\"\n        });\n        setWorksTime({\n          works: \"\",\n          houseWork: \"\"\n        });\n      }\n    }\n  }; // 폼 제출 핸들러\n\n\n  const submitHandler = async () => {\n    // post할 데이터\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest\n      },\n      private: {\n        privates,\n        game\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep\n      },\n      working: {\n        works,\n        houseWork\n      },\n      entireTime\n    }; // fetch POST\n\n    await fetch(\"http://localhost:3000/timedata\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(timeData)\n    });\n    await getData(setData);\n    setSelectedDate(selectedDate + 1);\n    console.log(data);\n  };\n\n  const updateHandler = async () => {\n    // post할 데이터\n    const id = await getId(data);\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest\n      },\n      private: {\n        privates,\n        game\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep\n      },\n      working: {\n        works,\n        houseWork\n      },\n      entireTime\n    }; // fetch POST\n\n    await fetch(`http://localhost:3000/timedata/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(timeData)\n    });\n    await getData(setData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(InputForm, {\n        handlers: inputHandlers,\n        entireTime: entireTime,\n        submitHandler: submitHandler,\n        selectedDate: selectedDate,\n        calender: calender,\n        updateHandler: updateHandler,\n        finishedDay: finishedDay,\n        improveTime: improveTime,\n        privateTime: privateTime,\n        sleepTime: sleepTime,\n        worksTime: worksTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Calender, {\n        calender: calender,\n        setCalender: setCalender,\n        setSelectedDate: setSelectedDate,\n        selectedDate: selectedDate,\n        data: data,\n        finishedDay: finishedDay,\n        setFinishedDays: setFinishedDays,\n        getFormInfo: getFormInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(InputPage, \"Vvh4HZTej5+nHE2dOCWIPuxFrJ0=\");\n\n_c = InputPage;\nconst Container = styled.div`\n  display: flex;\n`;\n_c2 = Container;\nexport default InputPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InputPage\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/pages/input-page/InputPage.tsx"],"names":["React","useState","useEffect","Header","InputForm","styled","sumHoursMinutes","Calender","getData","minutesToHours","InputPage","data","setData","calender","setCalender","thisYear","Date","getFullYear","thisMonth","getMonth","selectedDate","setSelectedDate","getDate","finishedDay","setFinishedDays","improveTime","setImproveTime","study","workout","reading","rest","privateTime","setPrivateTime","privates","game","sleepTime","setSleepTime","night","nap","wake","sleep","worksTime","setWorksTime","works","houseWork","entireTime","entireImprove","Object","values","reduce","acc","val","entirePrivate","entireWorks","entireSleep","inputHandlers","worksHandler","e","value","name","target","sleepHandler","privateHandler","improveHandler","getId","map","item","date","id","join","getFormInfo","response","fetch","result","json","private","sleeping","working","submitHandler","timeData","improve","method","headers","body","JSON","stringify","console","log","updateHandler","Container","div"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,cAAT,QAA+B,4BAA/B;;;;AAGA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,MAAc;AACrD,UAAMc,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAjB;AACA,UAAMC,SAAS,GAAG,IAAIF,IAAJ,GAAWG,QAAX,KAAwB,CAA1C;AAEA,WAAQ,GAAEJ,QAAS,IAAGG,SAAU,EAAhC;AACD,GALuC,CAAxC;AAMA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,IAAIe,IAAJ,GAAWM,OAAX,EAAD,CAAhD;AACA,QAAM,CAACC,WAAD,EAAcC,eAAd,IAAiCvB,QAAQ,CAAC,EAAD,CAA/C;AAEA,QAAM,CAACwB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC;AAC7C0B,IAAAA,KAAK,EAAE,EADsC;AAE7CC,IAAAA,OAAO,EAAE,EAFoC;AAG7CC,IAAAA,OAAO,EAAE,EAHoC;AAI7CC,IAAAA,IAAI,EAAE;AAJuC,GAAD,CAA9C;AAMA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC/B,QAAQ,CAAC;AAC7CgC,IAAAA,QAAQ,EAAE,EADmC;AAE7CC,IAAAA,IAAI,EAAE;AAFuC,GAAD,CAA9C;AAKA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BnC,QAAQ,CAAC;AACzCoC,IAAAA,KAAK,EAAE,EADkC;AAEzCC,IAAAA,GAAG,EAAE,EAFoC;AAGzCC,IAAAA,IAAI,EAAE,EAHmC;AAIzCC,IAAAA,KAAK,EAAE;AAJkC,GAAD,CAA1C;AAMA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BzC,QAAQ,CAAC;AACzC0C,IAAAA,KAAK,EAAE,EADkC;AAEzCC,IAAAA,SAAS,EAAE;AAF8B,GAAD,CAA1C;AAKA1C,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACI,OAAD,CAAP;AACD,GAFQ,EAEN,EAFM,CAAT,CAjCmB,CAqCnB;;AACA,QAAM;AAAEe,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA;AAA3B,MAAoCL,WAA1C;AACA,QAAM;AAAEQ,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAqBH,WAA3B;AACA,QAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA,GAAT;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA;AAApB,MAA8BL,SAApC;AACA,QAAM;AAAEQ,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBH,SAA7B;AAEA,QAAMI,UAAU,GAAG;AACjBC,IAAAA,aAAa,EAAErC,cAAc,CAC3BsC,MAAM,CAACC,MAAP,CAAcvB,WAAd,EAA2BwB,MAA3B,CACE,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAG5C,eAAe,CAAC6C,GAAD,CADrC,EAEE,CAFF,CAD2B,CADZ;AAOjBC,IAAAA,aAAa,EAAE3C,cAAc,CAC3BsC,MAAM,CAACC,MAAP,CAAcjB,WAAd,EAA2BkB,MAA3B,CACE,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAG5C,eAAe,CAAC6C,GAAD,CADrC,EAEE,CAFF,CAD2B,CAPZ;AAajBE,IAAAA,WAAW,EAAE5C,cAAc,CACzBsC,MAAM,CAACC,MAAP,CAAcP,SAAd,EAAyBQ,MAAzB,CACE,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAG5C,eAAe,CAAC6C,GAAD,CADrC,EAEE,CAFF,CADyB,CAbV;AAoBjBG,IAAAA,WAAW,EAAE7C,cAAc,CACzBH,eAAe,CAAC6B,SAAS,CAACE,KAAX,CAAf,GAAmC/B,eAAe,CAAC6B,SAAS,CAACG,GAAX,CADzB;AApBV,GAAnB,CA3CmB,CAoEnB;;AACA,QAAMiB,aAAa,GAAG;AACpBC,IAAAA,YAAY,CAACC,CAAD,EAAyC;AACnD,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAkBF,CAAC,CAACG,MAA1B;AACAlB,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEX,SAACkB,IAAD,GAAQD;AAFG,OAAD,CAAZ;AAID,KAPmB;;AAQpBG,IAAAA,YAAY,CAACJ,CAAD,EAAyC;AACnD,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAkBF,CAAC,CAACG,MAA1B;AACAxB,MAAAA,YAAY,CAAC,EACX,GAAGD,SADQ;AAEX,SAACwB,IAAD,GAAQD;AAFG,OAAD,CAAZ;AAID,KAdmB;;AAepBI,IAAAA,cAAc,CAACL,CAAD,EAAyC;AACrD,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAkBF,CAAC,CAACG,MAA1B;AACA5B,MAAAA,cAAc,CAAC,EACb,GAAGD,WADU;AAEb,SAAC4B,IAAD,GAAQD;AAFK,OAAD,CAAd;AAID,KArBmB;;AAsBpBK,IAAAA,cAAc,CAACN,CAAD,EAAyC;AACrD,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAkBF,CAAC,CAACG,MAA1B;AACAlC,MAAAA,cAAc,CAAC,EACb,GAAGD,WADU;AAEb,SAACkC,IAAD,GAAQD;AAFK,OAAD,CAAd;AAID;;AA5BmB,GAAtB;;AA8BA,QAAMM,KAAK,GAAIrD,IAAD,IAAe;AAC3B,QAAIA,IAAJ,EAAU;AACR,aAAOA,IAAI,CACRsD,GADI,CACCC,IAAD,IAAmB;AACtB,YAAIA,IAAI,CAACC,IAAL,KAAe,GAAEtD,QAAS,IAAGO,YAAa,EAA9C,EAAiD;AAC/C,iBAAO8C,IAAI,CAACE,EAAZ;AACD;;AACD,eAAO,EAAP;AACD,OANI,EAOJC,IAPI,CAOC,EAPD,CAAP;AAQD;AACF,GAXD;;AAaA,QAAMC,WAAW,GAAG,MAAO3D,IAAP,IAAqB;AACvC,QAAIA,IAAJ,EAAU;AACR,YAAMyD,EAAE,GAAG,MAAMJ,KAAK,CAACrD,IAAD,CAAtB;;AACA,UAAIyD,EAAJ,EAAQ;AACN,cAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,kCAAiCJ,EAAG,EAAtC,CAA5B;AACA,cAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACAhD,QAAAA,cAAc,CAAC,MAAM;AACnB,iBAAO,EACL,GAAGD,WADE;AAELgD,YAAAA;AAFK,WAAP;AAID,SALa,CAAd;AAMAzC,QAAAA,cAAc,CAACyC,MAAM,CAACE,OAAR,CAAd;AACAvC,QAAAA,YAAY,CAACqC,MAAM,CAACG,QAAR,CAAZ;AACAlC,QAAAA,YAAY,CAAC+B,MAAM,CAACI,OAAR,CAAZ;AACD,OAZD,MAYO;AACLnD,QAAAA,cAAc,CAAC;AACbC,UAAAA,KAAK,EAAE,EADM;AAEbC,UAAAA,OAAO,EAAE,EAFI;AAGbC,UAAAA,OAAO,EAAE,EAHI;AAIbC,UAAAA,IAAI,EAAE;AAJO,SAAD,CAAd;AAMAE,QAAAA,cAAc,CAAC;AACbC,UAAAA,QAAQ,EAAE,EADG;AAEbC,UAAAA,IAAI,EAAE;AAFO,SAAD,CAAd;AAIAE,QAAAA,YAAY,CAAC;AACXC,UAAAA,KAAK,EAAE,EADI;AAEXC,UAAAA,GAAG,EAAE,EAFM;AAGXC,UAAAA,IAAI,EAAE,EAHK;AAIXC,UAAAA,KAAK,EAAE;AAJI,SAAD,CAAZ;AAMAE,QAAAA,YAAY,CAAC;AAAEC,UAAAA,KAAK,EAAE,EAAT;AAAaC,UAAAA,SAAS,EAAE;AAAxB,SAAD,CAAZ;AACD;AACF;AACF,GAnCD,CAhHmB,CAqJnB;;;AACA,QAAMkC,aAAa,GAAG,YAAY;AAChC;AACA,UAAMC,QAAQ,GAAG;AACfZ,MAAAA,IAAI,EAAG,GAAEtD,QAAS,IAAGO,YAAa,EADnB;AAEf4D,MAAAA,OAAO,EAAE;AACPrD,QAAAA,KADO;AAEPC,QAAAA,OAFO;AAGPC,QAAAA,OAHO;AAIPC,QAAAA;AAJO,OAFM;AAQf6C,MAAAA,OAAO,EAAE;AACP1C,QAAAA,QADO;AAEPC,QAAAA;AAFO,OARM;AAYf0C,MAAAA,QAAQ,EAAE;AACRvC,QAAAA,KADQ;AAERC,QAAAA,GAFQ;AAGRC,QAAAA,IAHQ;AAIRC,QAAAA;AAJQ,OAZK;AAkBfqC,MAAAA,OAAO,EAAE;AACPlC,QAAAA,KADO;AAEPC,QAAAA;AAFO,OAlBM;AAsBfC,MAAAA;AAtBe,KAAjB,CAFgC,CA2BhC;;AACA,UAAM2B,KAAK,CAAC,gCAAD,EAAmC;AAC5CS,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFmC;AAK5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AALsC,KAAnC,CAAX;AAQA,UAAMvE,OAAO,CAACI,OAAD,CAAb;AACAS,IAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACAkE,IAAAA,OAAO,CAACC,GAAR,CAAY5E,IAAZ;AACD,GAvCD;;AAyCA,QAAM6E,aAAa,GAAG,YAAY;AAChC;AACA,UAAMpB,EAAE,GAAG,MAAMJ,KAAK,CAACrD,IAAD,CAAtB;AACA,UAAMoE,QAAQ,GAAG;AACfZ,MAAAA,IAAI,EAAG,GAAEtD,QAAS,IAAGO,YAAa,EADnB;AAEf4D,MAAAA,OAAO,EAAE;AACPrD,QAAAA,KADO;AAEPC,QAAAA,OAFO;AAGPC,QAAAA,OAHO;AAIPC,QAAAA;AAJO,OAFM;AAQf6C,MAAAA,OAAO,EAAE;AACP1C,QAAAA,QADO;AAEPC,QAAAA;AAFO,OARM;AAYf0C,MAAAA,QAAQ,EAAE;AACRvC,QAAAA,KADQ;AAERC,QAAAA,GAFQ;AAGRC,QAAAA,IAHQ;AAIRC,QAAAA;AAJQ,OAZK;AAkBfqC,MAAAA,OAAO,EAAE;AACPlC,QAAAA,KADO;AAEPC,QAAAA;AAFO,OAlBM;AAsBfC,MAAAA;AAtBe,KAAjB,CAHgC,CA2BhC;;AACA,UAAM2B,KAAK,CAAE,kCAAiCJ,EAAG,EAAtC,EAAyC;AAClDa,MAAAA,MAAM,EAAE,KAD0C;AAElDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFyC;AAKlDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AAL4C,KAAzC,CAAX;AAOA,UAAMvE,OAAO,CAACI,OAAD,CAAb;AACD,GApCD;;AAqCA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,QAAQ,EAAE2C,aADZ;AAEE,QAAA,UAAU,EAAEV,UAFd;AAGE,QAAA,aAAa,EAAEiC,aAHjB;AAIE,QAAA,YAAY,EAAE1D,YAJhB;AAKE,QAAA,QAAQ,EAAEP,QALZ;AAME,QAAA,aAAa,EAAE2E,aANjB;AAOE,QAAA,WAAW,EAAEjE,WAPf;AAQE,QAAA,WAAW,EAAEE,WARf;AASE,QAAA,WAAW,EAAEM,WATf;AAUE,QAAA,SAAS,EAAEI,SAVb;AAWE,QAAA,SAAS,EAAEM;AAXb;AAAA;AAAA;AAAA;AAAA,cADF,eAcE,QAAC,QAAD;AACE,QAAA,QAAQ,EAAE5B,QADZ;AAEE,QAAA,WAAW,EAAEC,WAFf;AAGE,QAAA,eAAe,EAAEO,eAHnB;AAIE,QAAA,YAAY,EAAED,YAJhB;AAKE,QAAA,IAAI,EAAET,IALR;AAME,QAAA,WAAW,EAAEY,WANf;AAOE,QAAA,eAAe,EAAEC,eAPnB;AAQE,QAAA,WAAW,EAAE8C;AARf;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AA8BD;;GAlQQ5D,S;;KAAAA,S;AAoQT,MAAM+E,SAAS,GAAGpF,MAAM,CAACqF,GAAI;AAC7B;AACA,CAFA;MAAMD,S;AAIN,eAAe/E,SAAf","sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"../../components/Header/Header\";\nimport InputForm from \"../../components/InputForm/InputForm\";\nimport styled from \"styled-components\";\nimport sumHoursMinutes from \"../../utils/sumTime\";\nimport Calender from \"../../components/Calendar/Calendar\";\nimport { getData } from \"../../utils/getData\";\nimport { minutesToHours } from \"../../utils/minutesToHours\";\nimport { OneDate } from \"../../type\";\n\nfunction InputPage() {\n  const [data, setData] = useState(null);\n  const [calender, setCalender] = useState((): string => {\n    const thisYear = new Date().getFullYear();\n    const thisMonth = new Date().getMonth() + 1;\n\n    return `${thisYear}.${thisMonth}`;\n  });\n  const [selectedDate, setSelectedDate] = useState(new Date().getDate());\n  const [finishedDay, setFinishedDays] = useState([]);\n\n  const [improveTime, setImproveTime] = useState({\n    study: \"\",\n    workout: \"\",\n    reading: \"\",\n    rest: \"\",\n  });\n  const [privateTime, setPrivateTime] = useState({\n    privates: \"\",\n    game: \"\",\n  });\n\n  const [sleepTime, setSleepTime] = useState({\n    night: \"\",\n    nap: \"\",\n    wake: \"\",\n    sleep: \"\",\n  });\n  const [worksTime, setWorksTime] = useState({\n    works: \"\",\n    houseWork: \"\",\n  });\n\n  useEffect(() => {\n    getData(setData);\n  }, []);\n\n  // 입력 항목 추출\n  const { study, workout, reading, rest } = improveTime;\n  const { privates, game } = privateTime;\n  const { night, nap, wake, sleep } = sleepTime;\n  const { works, houseWork } = worksTime;\n\n  const entireTime = {\n    entireImprove: minutesToHours(\n      Object.values(improveTime).reduce(\n        (acc, val) => acc + sumHoursMinutes(val),\n        0\n      )\n    ),\n    entirePrivate: minutesToHours(\n      Object.values(privateTime).reduce(\n        (acc, val) => acc + sumHoursMinutes(val),\n        0\n      )\n    ),\n    entireWorks: minutesToHours(\n      Object.values(worksTime).reduce(\n        (acc, val) => acc + sumHoursMinutes(val),\n        0\n      )\n    ),\n\n    entireSleep: minutesToHours(\n      sumHoursMinutes(sleepTime.night) + sumHoursMinutes(sleepTime.nap)\n    ),\n  };\n\n  // Input 핸들러 컬렉션\n  const inputHandlers = {\n    worksHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      setWorksTime({\n        ...worksTime,\n        [name]: value,\n      });\n    },\n    sleepHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      setSleepTime({\n        ...sleepTime,\n        [name]: value,\n      });\n    },\n    privateHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      setPrivateTime({\n        ...privateTime,\n        [name]: value,\n      });\n    },\n    improveHandler(e: React.ChangeEvent<HTMLInputElement>) {\n      const { value, name } = e.target;\n      setImproveTime({\n        ...improveTime,\n        [name]: value,\n      });\n    },\n  };\n  const getId = (data: any) => {\n    if (data) {\n      return data\n        .map((item: OneDate) => {\n          if (item.date === `${calender}.${selectedDate}`) {\n            return item.id;\n          }\n          return \"\";\n        })\n        .join(\"\");\n    }\n  };\n\n  const getFormInfo = async (data: any) => {\n    if (data) {\n      const id = await getId(data);\n      if (id) {\n        const response = await fetch(`http://localhost:3000/timedata/${id}`);\n        const result = await response.json();\n        setImproveTime(() => {\n          return {\n            ...improveTime,\n            result,\n          };\n        });\n        setPrivateTime(result.private);\n        setSleepTime(result.sleeping);\n        setWorksTime(result.working);\n      } else {\n        setImproveTime({\n          study: \"\",\n          workout: \"\",\n          reading: \"\",\n          rest: \"\",\n        });\n        setPrivateTime({\n          privates: \"\",\n          game: \"\",\n        });\n        setSleepTime({\n          night: \"\",\n          nap: \"\",\n          wake: \"\",\n          sleep: \"\",\n        });\n        setWorksTime({ works: \"\", houseWork: \"\" });\n      }\n    }\n  };\n\n  // 폼 제출 핸들러\n  const submitHandler = async () => {\n    // post할 데이터\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest,\n      },\n      private: {\n        privates,\n        game,\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep,\n      },\n      working: {\n        works,\n        houseWork,\n      },\n      entireTime,\n    };\n\n    // fetch POST\n    await fetch(\"http://localhost:3000/timedata\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(timeData),\n    });\n\n    await getData(setData);\n    setSelectedDate(selectedDate + 1);\n    console.log(data);\n  };\n\n  const updateHandler = async () => {\n    // post할 데이터\n    const id = await getId(data);\n    const timeData = {\n      date: `${calender}.${selectedDate}`,\n      improve: {\n        study,\n        workout,\n        reading,\n        rest,\n      },\n      private: {\n        privates,\n        game,\n      },\n      sleeping: {\n        night,\n        nap,\n        wake,\n        sleep,\n      },\n      working: {\n        works,\n        houseWork,\n      },\n      entireTime,\n    };\n    // fetch POST\n    await fetch(`http://localhost:3000/timedata/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(timeData),\n    });\n    await getData(setData);\n  };\n  return (\n    <>\n      <Header />\n      <Container>\n        <InputForm\n          handlers={inputHandlers}\n          entireTime={entireTime}\n          submitHandler={submitHandler}\n          selectedDate={selectedDate}\n          calender={calender}\n          updateHandler={updateHandler}\n          finishedDay={finishedDay}\n          improveTime={improveTime}\n          privateTime={privateTime}\n          sleepTime={sleepTime}\n          worksTime={worksTime}\n        />\n        <Calender\n          calender={calender}\n          setCalender={setCalender}\n          setSelectedDate={setSelectedDate}\n          selectedDate={selectedDate}\n          data={data}\n          finishedDay={finishedDay}\n          setFinishedDays={setFinishedDays}\n          getFormInfo={getFormInfo}\n        />\n      </Container>\n    </>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nexport default InputPage;\n"]},"metadata":{},"sourceType":"module"}