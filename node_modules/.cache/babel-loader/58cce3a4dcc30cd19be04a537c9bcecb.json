{"ast":null,"code":"var _jsxFileName = \"/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/components/analysis-week/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport styled from \"styled-components\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\"\n    },\n    title: {\n      display: true,\n      text: `자기계발 시간 통계`\n    }\n  }\n};\nconst labels = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    thisWeek,\n    lastWeek\n  } = _ref;\n  const [selectedList, setSelectedList] = useState(\"IMPROVE_TIME\");\n\n  const getChartData = dayData => {\n    switch (selectedList) {\n      case \"IMPROVE_TIME\":\n        return Number(dayData.entireTime.entireImprove.split(\":\")[0]);\n\n      case \"PRIVATE_TIME\":\n        return Number(dayData.entireTime.entirePrivate.split(\":\")[0]);\n\n      case \"SLEEP_TIME\":\n        return Number(dayData.entireTime.entireSleep.split(\":\")[0]);\n\n      case \"WORK_TIME\":\n        return Number(dayData.entireTime.entireWorks.split(\":\")[0]);\n    }\n  };\n\n  const data = {\n    labels,\n    datasets: [{\n      label: \"지난 주\",\n      data: lastWeek.map(day => {\n        console.log(day.entireTime.entireImprove);\n        return getChartData(day);\n      }),\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n    }, {\n      label: \"이번 주\",\n      data: thisWeek.map(day => {\n        console.log(Number(day.entireTime.entireImprove.split(\":\")[0]));\n        return getChartData(day);\n      }),\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\"\n    }]\n  };\n\n  const listClickHandler = e => {\n    console.log(e.target);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uC790\\uAE30\\uACC4\\uBC1C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uAC1C\\uC778\\uC2DC\\uAC04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uC77C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uCDE8\\uCE68\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uACF5\\uBD80\\uC2DC\\uAC04\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uB3C5\\uC11C\\uBC0F\\uC2E0\\uBB38\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"19+4RqT4Mj85V3DyCHDuoQTK+Dg=\");\n\n_c = Chart;\nconst TopBar = styled.ul`\n  display: flex;\n\n  li {\n    margin-left: 1rem;\n  }\n`;\n_c2 = TopBar;\nexport default Chart;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"TopBar\");","map":{"version":3,"sources":["/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/components/analysis-week/Chart.tsx"],"names":["React","useState","Bar","styled","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","register","options","responsive","plugins","legend","position","title","display","text","labels","thisWeek","lastWeek","selectedList","setSelectedList","getChartData","dayData","Number","entireTime","entireImprove","split","entirePrivate","entireSleep","entireWorks","data","datasets","label","map","day","console","log","backgroundColor","listClickHandler","e","target","TopBar","ul"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport styled from \"styled-components\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\" as const,\n    },\n    title: {\n      display: true,\n      text: `자기계발 시간 통계`,\n    },\n  },\n};\n\nconst labels = [\"월\", \"화\", \"수\", \"목\", \"금\", \"토\", \"일\"];\n\nfunction Chart({ thisWeek, lastWeek }: any) {\n  const [selectedList, setSelectedList] = useState(\"IMPROVE_TIME\");\n\n  const getChartData = (dayData: any) => {\n    switch (selectedList) {\n      case \"IMPROVE_TIME\":\n        return Number(dayData.entireTime.entireImprove.split(\":\")[0]);\n      case \"PRIVATE_TIME\":\n        return Number(dayData.entireTime.entirePrivate.split(\":\")[0]);\n      case \"SLEEP_TIME\":\n        return Number(dayData.entireTime.entireSleep.split(\":\")[0]);\n      case \"WORK_TIME\":\n        return Number(dayData.entireTime.entireWorks.split(\":\")[0]);\n    }\n  };\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"지난 주\",\n        data: lastWeek.map((day: any) => {\n          console.log(day.entireTime.entireImprove);\n          return getChartData(day);\n        }),\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n      },\n      {\n        label: \"이번 주\",\n        data: thisWeek.map((day: any) => {\n          console.log(Number(day.entireTime.entireImprove.split(\":\")[0]));\n          return getChartData(day);\n        }),\n        backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n      },\n    ],\n  };\n\n  const listClickHandler = (e: any) => {\n    console.log(e.target);\n  };\n\n  return (\n    <>\n      <TopBar>\n        <li>자기계발</li>\n        <li>개인시간</li>\n        <li>일</li>\n        <li>취침</li>\n        <li>공부시간</li>\n        <li>독서및신문</li>\n      </TopBar>\n      <Bar options={options} data={data} />\n    </>\n  );\n}\n\nconst TopBar = styled.ul`\n  display: flex;\n\n  li {\n    margin-left: 1rem;\n  }\n`;\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}