{"ast":null,"code":"var _jsxFileName = \"/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/components/DoughnutChart/DoughnutChart.tsx\";\nimport { Container, Box } from \"./style\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { getEntireTimes } from \"../../utils/getEntireTimes\";\nimport { getMainSumTimes } from \"../../utils/getSumTimesObj\";\nimport { minutesToHours } from \"../../utils/minutesToHours\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend, ChartDataLabels);\n\nfunction DoughnutChart(_ref) {\n  let {\n    data\n  } = _ref;\n  const thisYear = new Date().getFullYear();\n  const thisMonth = new Date().getMonth() + 1;\n  const thisMonthList = data.filter(item => {\n    return item.date.includes(`${thisYear}.${thisMonth}`);\n  });\n  const entireTimes = getEntireTimes(thisMonthList);\n  const sumTimes = getMainSumTimes(entireTimes);\n  const improveData = Number(minutesToHours(sumTimes.sumImprove).split(\":\")[0]);\n  const privateData = Number(minutesToHours(sumTimes.sumPrivate).split(\":\")[0]);\n  const worksData = Number(minutesToHours(sumTimes.sumWorks).split(\":\")[0]);\n  const sleepData = Number(minutesToHours(sumTimes.sumSleep).split(\":\")[0]);\n  const chartData = {\n    labels: [\"자기계발\", \"개인시간\", \"일\", \"취침\"],\n    datasets: [{\n      label: \"# of Votes\",\n      data: [improveData, privateData, worksData, sleepData],\n      backgroundColor: [\"rgba(251, 184, 1, 0.4)\", \"rgba(241, 66, 43, 0.4)\", \" rgba(74, 200, 190, 0.4)\", \"rgba(107, 29, 195, 0.4)\"],\n      borderColor: [\"#ffffff\"],\n      borderWidth: 5\n    }]\n  };\n  const options = {\n    responsive: true,\n    layout: {\n      padding: 10\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n        labels: {\n          font: {\n            size: 15\n          }\n        }\n      },\n      title: {\n        display: true,\n        font: {\n          size: 15,\n          weight: \"bold\"\n        }\n      },\n      datalabels: {\n        formatter: function (value, context) {\n          const sum = context.dataset.data.reduce((acc, val) => {\n            return acc + val;\n          }, 0);\n          const percent = (context.dataset.data[context.dataIndex] / sum * 100).toFixed(1);\n          return percent;\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uC774\\uBC88\\uB2EC \\uC2DC\\uAC04\\uC0AC\\uC6A9 \\uCC28\\uD2B8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Doughnut, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_c = DoughnutChart;\nexport default DoughnutChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"DoughnutChart\");","map":{"version":3,"sources":["/Users/gimmingyu/Desktop/TimeTracker/Time-Tracker/src/components/DoughnutChart/DoughnutChart.tsx"],"names":["Container","Box","Doughnut","Chart","ChartJS","ArcElement","Tooltip","Legend","getEntireTimes","getMainSumTimes","minutesToHours","ChartDataLabels","register","DoughnutChart","data","thisYear","Date","getFullYear","thisMonth","getMonth","thisMonthList","filter","item","date","includes","entireTimes","sumTimes","improveData","Number","sumImprove","split","privateData","sumPrivate","worksData","sumWorks","sleepData","sumSleep","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","layout","padding","plugins","legend","position","font","size","title","display","weight","datalabels","formatter","value","context","sum","dataset","reduce","acc","val","percent","dataIndex","toFixed"],"mappings":"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","sourcesContent":["import * as react from \"react\";\nimport { Container, Box } from \"./style\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, Title } from \"chart.js\";\nimport { OneDate } from \"../../type\";\nimport { getEntireTimes } from \"../../utils/getEntireTimes\";\nimport { getMainSumTimes } from \"../../utils/getSumTimesObj\";\nimport { minutesToHours } from \"../../utils/minutesToHours\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\n\nChartJS.register(ArcElement, Tooltip, Legend, ChartDataLabels);\n\nfunction DoughnutChart({ data }: any) {\n  const thisYear = new Date().getFullYear();\n  const thisMonth = new Date().getMonth() + 1;\n\n  const thisMonthList = data.filter((item: OneDate) => {\n    return item.date.includes(`${thisYear}.${thisMonth}`);\n  });\n\n  const entireTimes = getEntireTimes(thisMonthList);\n  const sumTimes = getMainSumTimes(entireTimes);\n\n  const improveData = Number(minutesToHours(sumTimes.sumImprove).split(\":\")[0]);\n  const privateData = Number(minutesToHours(sumTimes.sumPrivate).split(\":\")[0]);\n  const worksData = Number(minutesToHours(sumTimes.sumWorks).split(\":\")[0]);\n  const sleepData = Number(minutesToHours(sumTimes.sumSleep).split(\":\")[0]);\n\n  const chartData = {\n    labels: [\"자기계발\", \"개인시간\", \"일\", \"취침\"],\n    datasets: [\n      {\n        label: \"# of Votes\",\n        data: [improveData, privateData, worksData, sleepData],\n        backgroundColor: [\n          \"rgba(251, 184, 1, 0.4)\",\n          \"rgba(241, 66, 43, 0.4)\",\n          \" rgba(74, 200, 190, 0.4)\",\n          \"rgba(107, 29, 195, 0.4)\",\n        ],\n        borderColor: [\"#ffffff\"],\n        borderWidth: 5,\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    layout: {\n      padding: 10,\n    },\n    plugins: {\n      legend: {\n        position: \"top\" as const,\n        labels: {\n          font: {\n            size: 15,\n          },\n        },\n      },\n      title: {\n        display: true,\n\n        font: {\n          size: 15,\n          weight: \"bold\",\n        },\n      },\n      datalabels: {\n        formatter: function (value: any, context: any) {\n          const sum = context.dataset.data.reduce(\n            (acc: number, val: number) => {\n              return acc + val;\n            },\n            0\n          );\n          const percent = (\n            (context.dataset.data[context.dataIndex] / sum) *\n            100\n          ).toFixed(1);\n\n          return percent;\n        },\n      },\n    },\n  };\n\n  return (\n    <Container>\n      <h3>이번달 시간사용 차트</h3>\n      <Box>\n        <Doughnut data={chartData} options={options} />\n      </Box>\n    </Container>\n  );\n}\n\nexport default DoughnutChart;\n"]},"metadata":{},"sourceType":"module"}